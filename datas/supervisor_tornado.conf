;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;cashloan
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 日志级别，有critical, error, warn, info, debug, trace, or blather等  默认为info

[program:cashloan]
directory=/data/wwwroot/cashloan_api
command=/data/wwwroot/cashloan_api/.venv/bin/python3 /data/wwwroot/cashloan_api/server.py --port=81%(process_num)02d
process_name=81%(process_num)02d
numprocs=10
numprocs_start=1 ; 上面的process_num从1开始 默认从0 开始
autostart=true ; 在 supervisord 启动的时候也自动启动
startsecs=5 ; 启动 5 秒后没有异常退出，就当作已经正常启动了
autorestart=true ; 程序异常退出后自动重启
startretries=3 ; 启动失败自动重试次数，默认是 3
user=www ; 用哪个用户启动
redirect_stderr=true ; 把 stderr 重定向到 stdout，默认 false
stdout_logfile_maxbytes=20MB ; stdout 日志文件大小，默认 50MB
stdout_logfile_backups=20 ; stdout 日志文件备份数
; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）
stdout_logfile=/data/wwwroot/cashloan_api/logs/cashloan_stdout.log

; 可以通过 environment 来添加需要的环境变量，一种常见的用法是修改 PYTHONPATH
; environment=PYTHONPATH=$PYTHONPATH:/path/to/somewhere

; 默认为 false，如果设置为 true，当进程收到 stop 信号时，会自动将该信号发给该进程的子进程。
; 如果这个配置项为 true，那么也隐含 killasgroup 为 true。
; 例如在 Debug 模式使用 Flask 时，Flask 不会将接收到的 stop 信号也传递给它的子进程，因此就需要设置这个配置项。
stopasgroup=true ; send stop signal to the UNIX process
; 默认为 false，如果设置为 true，当进程收到 kill 信号时，会自动将该信号发给该进程的子进程。
; 如果这个程序使用了 python 的 multiprocessing 时，就能自动停止它的子线程。
killasgroup=true ; SIGKILL the UNIX process group (def false)

